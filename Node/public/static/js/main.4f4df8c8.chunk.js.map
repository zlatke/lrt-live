{"version":3,"sources":["assets/pixelImage.jpg","components/Title.js","Home.js","LrtStream.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Styles","styled","div","_templateObject","boatImage","Title","props","react_default","a","createElement","Jumbotron","fluid","className","Container","title","Home","Title_Title","LrtStream","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","URL","_this2","fetch","then","response","json","data","setState","content","style","display","justifyContent","ReactPlayer_default","url","playing","controls","Component","NoMatch","Layout","children","NavigationBar_templateObject","NavigationBar","NavigationBar_Styles","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","react_router_dom","to","App","Fragment","Layout_Layout","NavigationBar_NavigationBar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f4df8c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixelImage.50c7fbec.jpg\";","import React from 'react';\r\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport boatImage from '../assets/pixelImage.jpg';\r\n\r\nconst Styles = styled.div`\r\n  .jumbo {\r\n    background: url(${boatImage}) no-repeat fixed bottom;\r\n    background-size: cover;\r\n    color: #efefef;\r\n    height: 200px;\r\n    position: relative;\r\n    z-index: -2;\r\n  }\r\n  .overlay {\r\n    background-color: #000;\r\n    opacity: 0.6;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nexport const Title = (props) => (\r\n  <Styles>\r\n    <Jumbo fluid className=\"jumbo\">\r\n      <div className=\"overlay\"></div>\r\n      <Container>\r\n        <h1>{props.title}</h1>\r\n        <p>Let's watch some LRT</p>\r\n      </Container>\r\n    </Jumbo>\r\n  </Styles>\r\n)","import React from 'react'\r\nimport { Title } from './components/Title';\r\n\r\nexport const Home = () => (\r\n    <div>\r\n        <Title title='Welcome'/>\r\n        <h2>LRT live streamer</h2>\r\n    </div>\r\n)","import React, { Component } from 'react'\r\nimport ReactPlayer from 'react-player';\r\nimport { Title } from './components/Title';\r\n//import PlayButton from './components/PlayButton.js'\r\n\r\nclass LrtStream extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            URL: null\r\n          };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://www.lrt.lt/servisai/stream_url/live/get_live_url.php?channel=LTV1')\r\n          .then(response => response.json())\r\n          .then(data => {\r\n              this.setState({URL:data.response.data.content});\r\n            });\r\n      }\r\n    \r\n    render () {\r\n      return (\r\n        <div >\r\n        <Title title='Tiesiogiai'/>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n        <ReactPlayer url={this.state.URL} playing controls='true'/>\r\n        </div>\r\n    </div>\r\n      );\r\n    }\r\n  }\r\n  export default  LrtStream;","import React from 'react'\r\n\r\nexport const NoMatch = () =>(\r\n    <div>\r\n        <h2>No Match</h2>\r\n        \r\n    </div>\r\n)","import React from 'react';\r\nimport {Container} from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n    <Container>\r\n        {props.children}\r\n    </Container>\r\n)","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #222;\r\n  }\r\n  a, .navbar-brand, .navbar-nav .nav-link {\r\n    color: #bbb;\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">LRT</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/\">Home</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/stream\">LRT Stream</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles >\r\n)","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {Home} from './Home';\nimport LrtStream from './LrtStream';\nimport {NoMatch} from './NoMatch';\nimport {Layout} from './components/Layout';\nimport { NavigationBar } from './components/NavigationBar';\n//import Button from 'react-bootstrap/Button'\n \nclass App extends Component {\n  render () {\n    return (\n      <React.Fragment>\n        <Layout>\n        <Router>\n        <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/stream\" component={LrtStream}/>\n            <Route component={NoMatch}/>\n          </Switch>\n        </Router>\n        </Layout>\n      </React.Fragment>  \n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}